pipeline {
    agent {
        dockerContainer('maven:3.9.2')
    }
    environment {
        // GITHUB_CRED = "git branch: 'lesson27', changelog: false, credentialsId: 'github', poll: false, url: 'https://github.com/JiceO-o/codeby-devops.git'"
        // GITHUB_URL = "https://github.com/JiceO-o/codeby-devops.git"
        // APP_DIR = "lesson27/hello-world!"
        SONARQUBE_URL = "http://172.21.0.5:9000"
        SONARQUBE_PROJECT_KEY = "maven"
        SONARQUBE_CREDENTIALS_ID = "sonar"
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'lesson27', changelog: false, credentialsId: 'github', poll: false, url: 'https://github.com/JiceO-o/codeby-devops.git'
            }
        }
        stage('Build') {
            parallel {
                stage('hello-world!') {
                    when {
                        changeset "**/hello-world!/**"
                    }
                    steps {
                        dir('lesson27/hello-world!') {
                            sh 'mvn -B -DskipTests clean package'
                            sh 'ls -la'
                            sh 'ls -la target'
                        }
                    }
                }
                stage('hello-jenkins!') {
                    when {
                        changeset "**/hello-jenkins!/**"
                    }
                    steps {
                        dir('lesson27/hello-jenkins!') {
                            sh 'mvn -B -DskipTests clean package'
                            sh 'ls -la'
                            sh 'ls -la target'
                        }
                    }
                }
                stage('hello-devops!') {
                    when {
                        changeset "**/hello-devops!/**"
                    }
                    steps {
                        dir('lesson27/hello-devops!') {
                            sh 'mvn -B -DskipTests clean package'
                            sh 'ls -la'
                            sh 'ls -la target'
                        }
                    }
                }
            }
        }
        stage('SonarQube Analysis') {
            parallel {
                stage('Hello World') {
                    when {
                        changeset "**/hello-world!/**"
                    }
                    steps {
                        dir('lesson27/hello-world!') {
                            withSonarQubeEnv(credentialsId: 'sonar', installationName: 'SonarServer') { 
                                sh "mvn clean verify sonar:sonar -Dsonar.projectKey=sonar_2 -Dsonar.projectName='sonar_2'"
                            }
                        }
                    }
                }
                stage('Hello Jenkins') {
                    when {
                        changeset "**/hello-jenkins!/**"
                    }
                    steps {
                        dir('lesson27/hello-jenkins!') {
                            withSonarQubeEnv(credentialsId: 'sonar', installationName: 'SonarServer') {
                               sh "mvn clean verify sonar:sonar -Dsonar.projectKey=sonar_2 -Dsonar.projectName='sonar_2'"
                            }
                        }
                    }
                }
                stage('hello-devops!') {
                    when {
                        changeset "**/hello-devops!/**"
                    }
                    steps {
                        dir('lesson27/hello-devops!') {
                            withSonarQubeEnv(credentialsId: 'sonar', installationName: 'SonarServer') {
                                sh "mvn clean verify sonar:sonar -Dsonar.projectKey=sonar_2 -Dsonar.projectName='sonar_2'"
                            }
                        }
                    }
                }
            }
        }
        stage('SonarQube Quality Gate') {
            steps{
                sleep 30
                waitForQualityGate abortPipeline: true
            }
        }
        stage('Test') {
            parallel {
                stage('hello-world!') {
                    when {
                        changeset "**/hello-world!/**"
                    }
                    steps {
                        dir('lesson27/hello-world!') {
                            sh 'mvn test'
                        }
                    }
                }
                stage('hello-jenkins!') {
                    when {
                        changeset "**/hello-jenkins!/**"
                    }
                    steps {
                        dir('lesson27/hello-jenkins!') {
                            sh 'mvn test'
                        }
                    }
                }
                stage('hello-devops!') {
                    when {
                        changeset "**/hello-devops!/**"
                    }
                    steps {
                        dir('lesson27/hello-devops!') {
                            sh 'mvn test'
                        }
                    }
                }
            }
        }
        stage('Deliver') {
            parallel {
                stage('hello-world!') {
                    when {
                        changeset "**/hello-world!/**"
                    }
                    steps {
                        sh "./lesson27/hello-world!/jenkins/scripts/deliver.sh"
                    }
                }
                stage('hello-jenkins!') {
                    when {
                        changeset "**/hello-jenkins!/**"
                    }
                    steps {
                        sh "./lesson27/hello-jenkins!/jenkins/scripts/deliver.sh"
                    }
                }
                stage('hello-devops!') {
                    when {
                        changeset "**/hello-devops!/**"
                    }
                    steps {
                        sh "./lesson27/hello-devops!/jenkins/scripts/deliver.sh"
                    }
                }
            }
        }
    }
}
 